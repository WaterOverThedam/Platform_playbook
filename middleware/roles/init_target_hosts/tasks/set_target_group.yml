---

#这里的search其实是regex_search；match匹配需要完整模式，search只需要满足版本，reject是取反
- name: set app targets
  set_fact: "app_targets={{groups[group_name]|select('search','(mid_)?app')|reject('search','dmts')|list}}"
- name: debug app info
  debug: var=app_targets verbosity=0

- name: set mid targets
  set_fact: "mid_targets={{groups[group_name]|select('match','.*mid.*')|reject('search','dmts')|list}}"
- name: debug mid info
  debug: var=mid_targets verbosity=0

- name: set web targets
  set_fact: "web_targets={{groups[group_name]|select('search','web')|list}}"
- name: debug web info
  debug: var=web_targets verbosity=0

#保障mid主机是奇数个
- name: get deployable cluster middleware host numbers
  shell: "for i in {1..{{mid_targets|length}}};do if [ $((($i%2))) -ne 0 ];then echo $i ;fi; done|awk 'END {print}' "
  delegate_to: localhost
  register: mid_num
  failed_when: "mid_targets|length == 0"
- name: debug mid_num info 
  debug: var=mid_num verbosity=0

- name: init mid_app targets
  set_fact: "mid_targets={{mid_targets[0:mid_num.stdout|int]}}"
- name: debug mid info again
  debug: var=mid_targets verbosity=0

#mid_app_targets,mid_redis_targets初始化
- name: init mid_app targets
  set_fact: 
     mid_app_targets: "{{mid_targets + app_targets}}"
     mid_redis_targets: "{{mid_targets}}"

- name: initial values
  debug: var=[expanded_redis,expanded_consul]

#仅启用扩展中间件时,追加redis app主机到中间件
- name: append mid_redis targets
  set_fact:
    mid_redis_targets: "{{mid_redis_targets + app_targets}}"
  when: "expanded_redis|default(false,true) == true"

- name: debug mid_app_targets info
  debug: var=mid_app_targets verbosity=0
- name: debug mid_redis_targets info
  debug: var=mid_redis_targets verbosity=0
##redis集群节点数，只能是6或3
- name: get deployable cluster middleware host numbers
  shell: "if [ {{mid_redis_targets|length}} -gt 5 ];then echo 6;else echo 3;fi"
  delegate_to: localhost
  register: redis_num
- name: debug redis_num info 
  debug: var=redis_num verbosity=0
- name: adjusted for redis targets
  set_fact: "redis_targets={{mid_redis_targets[0:redis_num.stdout|int]}}"
- name: debug redis_targets info
  debug: var=redis_targets verbosity=0

#根据python列表生成ansible主机清单
- name: set mid_targets group
  add_host: name={{ item }} group=mid_targets
  loop: "{{mid_targets}}"

- name: set app_targets group
  add_host: name={{ item }} group=app_targets
  loop: "{{app_targets}}"

- name: set mid_app_targets group
  add_host: name={{ item }} group=mid_app_targets
  loop: "{{mid_app_targets}}"

- name: set redis_targets group
  add_host: name={{ item }} group=redis_targets
  loop: "{{redis_targets}}"

- name: set web_targets group
  add_host: name={{ item }} group=web_targets
  loop: "{{web_targets}}"

- name: set web_first_two 
  set_fact: "web_first_two={{web_targets[:(2 if web_targets|length>2 else web_targets|length)]}}"
  tags: ['web_targets']
- name: set web_first_two group
  add_host: name="{{item}}" group=web_first_two
  loop: "{{web_first_two}}"
  tags: ['web_targets']

- name: set mids_first_three group
  add_host: name="{{item}}" group=mids_first_three
  loop: "{{mid_targets[:(3 if mid_targets|length>3 else mid_targets|length)]}}"
  when: mid_targets
  tags: ['app_targets']

- name: set mids_first group
  add_host: name="{{mid_targets[0]}}" group=mids_first
  when: mid_targets

- name: gen mid_target ips
  set_fact: ip='{{hostvars[item].ansible_ssh_host}}'
  with_items: '{{mid_targets}}'
  when: mid_targets
  register: mid_target_ips_tmp

- name: set sql
  set_fact:
    soid_sql: "select HOSPITAL_SOID from TNT_TENANT;"

- name: get h2 param
  #与host下的脚本相同，直接调用
  set_fact:
    soid: "{{ lookup('pipe','sh {{role_path}}/../../../host/roles/get_parameters/files/h2.sh {{h2_db_url}} {{h2_db_user}} {{h2_db_pass}} {{soid_sql}}') }}"
  failed_when: soid == ''



